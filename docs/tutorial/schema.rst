Schema Overview
---------------

** see 'autoinvent-example' project for demo of how schema is auto-generated from SQLAlchemy field types, backend 'metadata' customization, frontend autoinvent libraries, and front-end customization

( AG ) = "Auto-Generated" (by sqlalchemy-to-metajson on the backend); not necessary to change

( AGF ) = "Auto-Generated By Frontend" (by 'conveyor-redux', 'magql-query', or other front-end library; merged with backend schema)

( R ) = "Required" to specify in backend 'metadata' otherwise app won't run

( C ) = "Customize"; usually needs to be customized or specified in some way => needs attention upon startup

( O ) = "Optional"; usually not important to customize, or has a default that is the preferred behavior => does not need attention upon startup

( DEF ) = "Default"; usually does not need to be changed; has a default display value (derived from modelName/fieldName); (default created by conveyor-schema)

.. code-block:: hjson

    {
        <modelName>: {
            tabs: (O) # See 'tabs' docs for arguments. Called by schema.getModelAttribute(modelName, 'tabs'). Passed as props to <DetailPage> component.
            hasIndex: (O) bool # Whether the model includes an Index page. Called by schema.getHasIndex(modelName). Used in DefaultDetailPageTitle and DefaultIndex components.
            deletable: (C) bool or function # Whether the model is deletable. Called by schema.isDeletable({ schema, modelName, node, parentNode, customProps }). Render <DeleteButton>n and <DeleteDetail> if true inside DefaultDetailPageTitle component.
            creatable: (C) bool or function # Whether the model is creatable. Called by schema.isCreatable({ schema, modelName, parentNode, data, customProps }). If true, renders <DetailCreateButton> in detail, <CreateButton> in index, and <CreateButton> next to relationship labels.
            singleton: (O) bool # Whether the model is singleton (Display one instance only). Called by schema.getSingleton(modelName).  Index redirects to Detail page if True. Called inside Index component.
            createFieldOrder: (O) list or function # Returns order that Create fields display. Called by schema.getCreateFields({ modelName, customProps }). Passed as props to <FieldInputList> component.
            indexFieldOrder: (O) list or function # Returns order that Index fields display. Called by schema.getIndexFields({ modelName, data, customProps }). Passed as props to <IndexPage> component.
            detailFieldOrder: (O) list or function # Returns order that Detail fields display. Called by schema.getDetailFields({ modelName, node, customProps }). Called inside partitionDetailFields component.
            queryName: (R) str # Name of gql query that will return a single instance of the model. 
            queryAllName: (R) str # Name of gqlquery that will return all instances of the model.
            queryRequired: (R) [str] # Fields necessary for  displaying the model on another model's detail page. When you visit a page, only data necessary for that model is queried. Data for relationship fields is queried only if it exists in 'queryRequired'. WARNING: No circular dependency (don't add fields that are relationships if its target ALSO references the model).
            modelName: (AG) str # Name of model
            displayName: (DEF) str or function # Singular display name of model or function. Called by schema.getModelLabel({ modelName, node, data, customProps }). Used to display Field in Detail, Input, and Header components. Displayed as HeaderLink in DefaultDetailPageTitle component.
            displayNamePlural: (DEF) str of function # Plural display name of model or function. Called by schema.getModelLabelPlural(({ modelName, data, customProps }). Displayed in <IndexTitle> component.
            tableLinkField: (C) str or function # Name of the field/column on the table head that will contain a hyperlink to the detail page. A value of null means no link to the model should be displayed. Data under column will be overwritten with the field data determined in 'displayaField'. Called by schema.getTableLinkField(modelName, fieldOrder). Passed as props to Table <Head> and <Body> components.
            displayField: (O) str of function # Name of field that holds the data used to represent the instance  when displayed (Detail page). Overwrites data displayed under field determined on 'tableLinkField'. Called by schema.getDisplayValue({ modelName, node, customProps }). Displayed in <DetailTitle>, RemoveDetail's <Modal>. FieldToOne's <Tooltip>, and <TableRowWithEdit> components if not null.
            fieldOrder: (R) [str] # List of ALL fields on a model in the order they should display on its own Detail and Index page. Also serves as a fall back if a different model displays this model without having a specified order. Called in schema.getIndexFields({ modelName, node, customProps }) and schema.getDetailFields({ modelName, data, customProps }). Passed as props to <IndexPage> and returned from partitionDetailFields component
            filterable: (O) bool or function # Whether the given table is filterable (Can be set on field level as well). Called by schema.isTableFilterable({ modelName, data, customProps }). If true, displays <FilterModal> and <FilterModalButton> components.
            sortable: (O) bool or function # Whether the given table is sortable (can be set on field level as well). Called by schema.isTableSortable({ modelName, customProps }). Passed as props to <THList> component.
            paginate: (O) bool # If false, deactivates pagination for the model index table. Located in schemaJSON.modelName.paginate (Index) and schemaJSON.modelName.fields.fieldName.paginate (Detail). Checked whether to display <IndexPagination> and <DetailPagination> components.
            fields: {
                <fieldName>: {
                    components: (O) {
                        cell: function # Overrides the display component of model.field displayed within a table. Called by schema.getCellOverride(modelName, fieldName). Returned from <TableRowWithEdit> component if not null.
                        detail: function # Overrides both the display label and value of modelName.field when displayed on a detail page. Called by schema.getDetailFieldOverride(modelName, fieldName). Overrides <DetailAttribute> component inside DetailAttributeList and DetailTableList.
                        detailLabel: function # Overrides display label of model.field when displayed on a detail page. Called by schema.getDetailLabelOverride(modelName, fieldName). Overrides <DetailLabel> component.
                        detailValue: function # Overrides display value of model.field when displayed on a detail page. Called by schema.getDetailValueOverride(modelName, fieldName). Overrides <DetailValue> component.
                        input: function # Override the input component of model.field when editing. Called by schema.getInputOverride(modelName, fieldName). Overrides <ChosenInput> component.
                        labelInfo: function # The content to display in the popover when hovering over a label. Located in model.field.components.labelInfo inside schemaJSON. Used to display popovers in <FormGroup> and <DefaultDetailLabel> components.

                    }
                    required: (AG) bool # If a field is required in order to submit a form. Located in schemaJSON.modelName.fieldName.required. Used in <DefaultDetailM2MFieldLabel>, <relationshipLabelFactory>, and <FormGroup> components.
                    fieldName: (AG) str # Name of the field, used as the key in fields dictionary. Get using schema.getField(modelName, fieldName).
                    fieldHelp: (O) str # Text to display under the input field in edit/create. Called by schema.getFieldHelpText(modelName, fieldName). Displayed inside <InputCore> component.
                    displayName: (DEF) str or function # Provides how the field should be displayed. Called by schema.getFieldLabel({ modelName, fieldName, node, data, customProps }). Called at DefaultDetailLabel, DefaultDetailM2MTableTitle, DefaultDetailM2MFieldLabel, ReviewTable, , RemoveDetail, InputCore, InputInnerCore, FieldImageModal, formatFilter, and THList.
                    noDataDisplayValue: (DEF) str or function # Value to display when a field has no data. Called by schema.getNoDataDisplayValue({ modelName, node, customProps }). Returned from <Table> and used as props inside of <Field> for different field types.
                    detailAttribute: (O) bool # For custom/virtual fields; unnecessary if 'type' specified; Ensures that field doesn't appear with other tables, but rather other detail attributes. Located in schemaJSON.modelName.fieldName.detailAttribute.
                    showFooter: (O) bool # If true and 'summary' not null, a table footer row displays the summary provided. Located at schemaJSON.modelName.fields.fieldName.showFooter. Displayed at <TFoot> component
                    
                    type: (AG) str # When type is a string, it provides the type of a simple type such as string, int, or date.
                    OR
                    type: Obj{ # When type is an object, provides the type of a more complicated type such as a relationship or enum.
                        type: (AG**) str # Database type of OneToOne, OneToMany, ManyToMany, or ManyToOne
                        target: (AG) str # modelName of the target of the relationship
                        backref: (AG) str # Name of the relationship on the target's side
                        tableFields: (R) [str] # List of fields on the target model to display when displaying a table on the detail page. Found at schemaJSON.modelName.fields.fieldName.type.tableFields. Passed as props to <DetailValue>.

                    }
                    choices: (AG) Obj { # If this is a choice field, maps out values & their labels and overrides default. Called by schema.getEnumLabel({ modelName, fieldName, value? }) and schema.getEnumChoices(modelName, fieldName). Called by getRowFields, <FieldEnum>, and <InputInnerCore> components
                        'choice_value' : 'choice_label'

                    }
                    choiceOrder: list # Defines order choices display. Called by schema.getEnumChoiceOrder(modelName, fieldName). Used in <InputInnerCore> component
                    displayConditions: (O) {
                        detail: # A function that evaluates to true or false to determine if the field will display on a detail page. Called by schema.shouldDisplayDetail({ modelName, fieldName, node, customProps }). Determines whether <DetailAttributeList> returns a component or null
                        index: # A function that evaluates to true or false to determine if the field will display in an index table. Called by shouldDisplayIndex({ modelName, fieldName, node, customProps }. Determines whether <ThFootList>, <THList>, and <TDList> returns a component or null
                        create: # A function that evaluates to true or false to determine if the field will display on a create page. Called by schema.shouldDisplayCreate({ modelName, fieldName, customProps }). Determines whether <FieldInputList> returns a component or null.

                    },
                    hideable: (O) bool # If table component can be hidden/have a 'hide' button.
                    disabled: (O) bool or function # Whether field should be disabled or not. Called by schema.isFieldDisabled({ modelName, fieldName, formStack, customProps }). If true, field value becomes disabledValue and passed to <Input> component.
                    disabledDropDown: (O) function # Filters out or disables drop down options. Called by schema.getDropDownDisableCondition(modelName, fieldName) and returns options to schema.getOptionsOverride({ modelName, fieldName, options, value, customProps }). 
                    sortable: (C) bool or function # Whether the given field should be sortable on tables (can be set on table level as well). Called by schema.isSortable({ modelName, fieldName, customProps }). Used in <THList>
                    filterable: (C) bool or function # Whether the given field should be filterable on tables (can be set on table level as well). Called by schema.isFilterable({ modelName, fieldName, data, customProps }). Used in formatFilter.
                    editable: (C) bool or function # Whether the given field should be displayed on the detail page. Called by schema.isFieldEditable({ modelName, fieldName, node, parentNode, customProps }). Determines whether <EditInput>, <InlineEditButton>, <FileDelete>, and <TableEditButton> components are returned.
                    showDetail: (C) bool or function # Whether the given field should be displayed on the detail page. Called by schema.getDetailFields({ modelName, node, customProps }) inside partitionDetailFields function. Result passed as props to <DetailAttributeList> and DetailTableList> components. 
                    showIndex: (C) bool or function # Whether the given field should be displayed on the index page. Called by schema.getIndexFields({ modelName, data, customProps }). Passed to props to <IndexPage> component.
                    showCreate: (C) bool or function # Whether the given field should be displayed on the create page. Called by schema.getCreateFields({ modelName, customProps }). Passed to props in <FieldInputList> component.
                    showTooltip: (C) bool or function # Whether the given field should be displayed on the tooltip. Called by schema.getTooltipFields({ modelName: relModelName, customProps }). Determines if a <Tooltip> component is returned when displaying a <FieldToOne> component. 
                    queryIndex: (O) bool # Whether the field should be queried while fetching index page; by default the query looks at 'showIndex' prop, but if showIndex is false and queryIndex is true, it will still query the field; Used if you wish to have a field available but NOT display for index.
                    queryDetail: (O) bool # Whether the field should be queried while fetching detail page. By default, the query will look at 'showDetail' prop, but if showDetail isf alse and queryDetail is true, it will still query the field. Used if you wish to have a field available but NOT display for detail. 
                    virtualField: (O) bool # If true, will deactivate the field from being queried so that no backend resolver needs to be created. TODO: Find call
                    
                }

            },
            # Redux Actions
            actions: (AGF) {
                create: { },
                edit: { },
                delete: { },
                list: { },
                detail: { },

            },
            # Model level components
            components: (O) {
                detail: function # Detail override component (both title and page). Called by schema.getDetailOverride(modelName). Overrides <DetailComponent> component
                detailTitle: function # Detail Title override component. Called by schema.getDetailTitleOverride(modelName). Overrides <DetailTitle> component
                detailPage: function # Detail Page override component. Called by schema.getDetailPageOverride(modelName). Overrides <DetailPage> component
                create: function # Create override component (both title and page). Called by schema.getCreateOverride(modelName). Overrides <CreateComponent> component
                createTitle: function # Create Title override. Called by schema.getCreateTitleOverride(modelName). Overrides <CreateTitle> component.
                createPage: function # Create page override component. Called by schema.getCreatePageOverride(modelName). Overrides <CreatePage> component.
                index: function # Index override component (both title and page) Called by schema.getIndexOverride(modelName). Overrides <IndexComponent> component.
                indexTitle: function # Index title override component. Called by schema.getIndexTitleOverride(modelName). Overrides <IndexTitle> component.
                indexPage: function # Index page override component. Called by schema.getIndexPageOverride(modelName). Overrides <IndexPage> component.

            }
            deleteModal: {
                rows: {
                    fieldName: function # Overrides display component of delete Detail modal. Located at schemaJSON.modelName.deleteModal.rows.key where key = fieldname, id, or __typename. Overrides getRowFields component.
                }
                headers: function # Overrides header display component of delete Detail modal. Located in schemaJSON.nodeModelName.deleteModal.headers. Used in <ReviewTable> component.
            }

        }

    }

** 'type' required to be specified in 'metadata' for 'file', 'currency', & custom fields